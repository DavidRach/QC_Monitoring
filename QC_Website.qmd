This document was the original testing ground for all things QC dashboard.  

This chunk blow corresponds to the testing ground for the visualized summary landing page

```{r}
library(Luciernaga)

Computer <- file.path("C:", "Users", "12692", "Desktop")
MainFolder <- file.path(Computer, "QC_Website")
```

```{r}
MFI_3L <- Luciernaga:::CurrentData(x="3L", MainFolder=MainFolder, type = "MFI")
Gain_3L <- Luciernaga:::CurrentData(x="3L", MainFolder=MainFolder, type = "Gain")

MFI_4L <- Luciernaga:::CurrentData(x="4L", MainFolder=MainFolder, type = "MFI")
Gain_4L <- Luciernaga:::CurrentData(x="4L", MainFolder=MainFolder, type = "Gain")

MFI_5L <- Luciernaga:::CurrentData(x="5L", MainFolder=MainFolder, type = "MFI")
Gain_5L <- Luciernaga:::CurrentData(x="5L", MainFolder=MainFolder, type = "Gain")

MFI_CS <- Luciernaga:::CurrentData(x="CS", MainFolder=MainFolder, type = "MFI")
Gain_CS <- Luciernaga:::CurrentData(x="CS", MainFolder=MainFolder, type = "Gain")
```

```{r}
The3L <- Luciernaga:::VisualQCSummary(x=Gain_3L)
The4L <- Luciernaga:::VisualQCSummary(x=Gain_4L)
The5L <- Luciernaga:::VisualQCSummary(x=Gain_5L)
TheCS <- Luciernaga:::VisualQCSummary(x=Gain_CS)
```

```{r}
ColorCodeStatus <- function(x, y){
  data <- y
  if (any(data$Gain == "Red") || any(data$rCV == "Red")) {
    ColorCode <- "Red"
  } else if (any(data$Gain == "Orange") || any(data$rCV == "Orange")) {
    ColorCode <- "Orange"
  } else {ColorCode <- "Green"}

  QCResults <- data.frame(Instrument = x, QCStatus=ColorCode)
  return(QCResults)
}

InstrumentNames <- c("3L", "4L", "5L", "CS")
Instruments <- list(The3L, The4L, The5L, TheCS)

map2(.x=InstrumentNames, .f=Luciernaga:::ColorCodeStatus, .y=Instruments) %>% bind_rows()

```



The R code below has been copied to QC_UpdateData.R to be used in the dashboard as part of a Source call. 

```{r}
#| message: FALSE
library(dplyr)
library(purrr)
library(tidyr)
library(stringr)

library(Luciernaga)
library(Coereba)

library(flowWorkspace)
library(lubridate)
```

```{r}
Computer <- file.path("C:", "Users", "12692", "Desktop")
MainFolder <- file.path(Computer, "QC_Website")
#list.files(MainFolder)
```

```{r}
LevyJenningsParse <- function(MainFolder, x){
Folder <- file.path(MainFolder, x)
LJTrackingFiles <- list.files(Folder, pattern="csv|CSV",
                              full.names = TRUE)

if (!length(LJTrackingFiles)==0){

if(length(LJTrackingFiles)==1){

Parsed <- QC_FilePrep(x=LJTrackingFiles, TrackChange=FALSE)
} else {message("Two csv files in the folder found!")}

TheArchive <- file.path(Folder, "Archive")
ArchivedDataFile <- list.files(TheArchive, pattern="csv|CSV",
                              full.names = TRUE)

if(!length(ArchivedDataFile)==0){

if(length(ArchivedDataFile)==1){
ArchivedData <- read.csv(ArchivedDataFile, check.names=FALSE)
} else {message("Two csv files in the folder found!")}

if (!ncol(ArchivedData) == ncol(Parsed)){
  stop("The number of columns for the new data don't match
       that of the archived data. Please make sure to 
       export the Levy-Jennings trackings with all available
       parameters")
} else {

 ArchivedData$DateTime <- ymd_hms(ArchivedData$DateTime)
 NewData <- generics::setdiff(Parsed, ArchivedData)
 UpdatedData <- rbind(NewData, ArchivedData)
}

file.remove(ArchivedDataFile)

} else {UpdatedData <- Parsed
}

file.remove(LJTrackingFiles)

name <- paste0("ArchiveData", x, ".csv")
StorageLocation <- file.path(TheArchive, name)

write.csv(UpdatedData, StorageLocation, row.names=FALSE)
} else {message("No LevyJennings files to update with in ", x)}

}
```

```{r}
TheList <- c("3L", "4L", "5L", "CS")
walk(.x=TheList, MainFolder=MainFolder, .f=LevyJenningsParse)
```
```{r}
QCBeadParse <- function(x, MainFolder){
Folder <- file.path(MainFolder, x)
FCS_Files <- list.files(Folder, pattern="fcs", full.names=TRUE)

if(!length(FCS_Files) == 0){

QCBeads <- FCS_Files[grep("Before|After", FCS_Files)]
BeforeAfter_CS <- load_cytoset_from_fcs(files=QCBeads,
transformation=FALSE, truncate_max_range = FALSE)

BeforeAfter <- map(.x=BeforeAfter_CS, .f=QC_GainMonitoring,
 sample.name = "TUBENAME", stats="median") %>% bind_rows()

BeforeAfter <- BeforeAfter %>% mutate(DateTime = DATE+TIME) %>%
  relocate(DateTime, .before=DATE)

ArchiveFolder <- file.path(Folder, "Archive")
ArchiveCSV <- list.files(ArchiveFolder, pattern="Bead", full.names=TRUE)

if (length(ArchiveCSV) == 1){
  ArchiveData <- read.csv(ArchiveCSV, check.names=FALSE)
  ArchiveData$DateTime <- ymd_hms(ArchiveData$DateTime)
  ArchiveData$DATE <- ymd(ArchiveData$DATE)
  ArchiveData$TIME <- hms(ArchiveData$TIME)
  Export <- ArchiveData %>% arrange(desc(DateTime))
  #write.csv(Export, "BeadData5L.csv", row.names=FALSE)
 
  if (ncol(BeforeAfter) == ncol(ArchiveData)){
  NewData <- generics::setdiff(BeforeAfter, ArchiveData)  
  AssembledData <- rbind(NewData, ArchiveData)
  Export <- AssembledData %>% arrange(desc(DateTime))
  
  file.remove(ArchiveCSV)
  
  name <- paste0("BeadData", x, ".csv")
  StorageLocation <- file.path(ArchiveFolder, name)
  
  write.csv(Export, StorageLocation, row.names=FALSE)
  
  file.remove(FCS_Files)
  
  } else {
  stop("The number of columns for the new data don't match
       that of the archived data. Please reach out")
    }
} else {stop("Two BeadData csv files in the archive folder!")}


} else {message("No fcs files to update with in ", x)}
  
}
```

```{r}
TheList <- c("3L", "4L", "5L", "CS")

walk(.x=TheList, .f=QCBeadParse, MainFolder=MainFolder)
```


```{r}
TheList <- c("3L", "4L", "5L", "CS")
# x <- "5L



```

